var searchIndex = {};
searchIndex['secret'] = {"items":[[0,"","secret","Rust bindings to libsecret.\nMany unix/linux systems utilize a secret service to securely store and retrieve passwords. Examples for such a SecretService are gnome-keyring and kwallet.\nThis library provides methods to access the system's secret service in a platform independent matter. This is done by linking to [libsecret](https://developer.gnome.org/libsecret/0.18/), a library developed by the gnome project.",null,null],[0,"ffi","","",null,null],[6,"gchar","secret::ffi","",null,null],[6,"gint","","",null,null],[6,"guint","","",null,null],[6,"guint64","","",null,null],[6,"gssize","","",null,null],[3,"GCancellable","","",null,null],[3,"SecretService","","",null,null],[3,"SecretSchema","","",null,null],[3,"SecretCollection","","",null,null],[3,"SecretItem","","",null,null],[3,"SecretValue","","",null,null],[5,"secret_service_get_sync","","",null,null],[5,"secret_service_disconnect","","",null,null],[5,"secret_service_open_sync","","",null,null],[5,"secret_service_get_collections","","",null,null],[5,"secret_service_get_flags","","",null,null],[5,"secret_service_get_session_algorithms","","",null,null],[5,"secret_service_ensure_session_sync","","",null,null],[5,"secret_service_load_collections_sync","","",null,null],[5,"secret_service_search_sync","","",null,null],[5,"secret_service_lock_sync","","",null,null],[5,"secret_service_unlock_sync","","",null,null],[5,"secret_service_store_sync","","",null,null],[5,"secret_service_lookup_sync","","",null,null],[5,"secret_service_clear_sync","","",null,null],[5,"secret_service_set_alias_sync","","",null,null],[5,"secret_service_get_collection_gtype","","",null,null],[5,"secret_service_get_item_gtype","","",null,null],[5,"secret_service_get_type","","",null,{"inputs":[],"output":{"name":"u64"}}],[5,"secret_collection_for_alias_sync","","",null,null],[5,"secret_collection_load_items_sync","","",null,null],[5,"secret_collection_create_sync","","",null,null],[5,"secret_collection_search_sync","","",null,null],[5,"secret_collection_delete_sync","","",null,null],[5,"secret_collection_get_created","","",null,null],[5,"secret_collection_get_service","","",null,null],[5,"secret_collection_get_flags","","",null,null],[5,"secret_collection_get_items","","",null,null],[5,"secret_collection_get_label","","",null,null],[5,"secret_collection_set_label_sync","","",null,null],[5,"secret_collection_get_locked","","",null,null],[5,"secret_collection_get_modified","","",null,null],[5,"secret_collection_refresh","","",null,null],[5,"secret_collection_get_type","","",null,{"inputs":[],"output":{"name":"u64"}}],[5,"secret_item_create_sync","","",null,null],[5,"secret_item_delete_sync","","",null,null],[5,"secret_item_get_schema_name","","",null,null],[5,"secret_item_get_attributes","","",null,null],[5,"secret_item_set_attributes_sync","","",null,null],[5,"secret_item_get_created","","",null,null],[5,"secret_item_get_label","","",null,null],[5,"secret_item_set_label_sync","","",null,null],[5,"secret_item_get_flags","","",null,null],[5,"secret_item_get_locked","","",null,null],[5,"secret_item_get_modified","","",null,null],[5,"secret_item_get_service","","",null,null],[5,"secret_item_get_secret","","",null,null],[5,"secret_item_load_secret_sync","","",null,null],[5,"secret_item_load_secrets_sync","","",null,null],[5,"secret_item_set_secret_sync","","",null,null],[5,"secret_item_refresh","","",null,null],[5,"secret_item_get_type","","",null,{"inputs":[],"output":{"name":"u64"}}],[5,"secret_value_new","","",null,null],[5,"secret_value_get","","",null,null],[5,"secret_value_get_text","","",null,null],[5,"secret_value_get_content_type","","",null,null],[5,"secret_value_ref","","",null,null],[5,"secret_value_unref","","",null,null],[5,"secret_value_get_type","","",null,{"inputs":[],"output":{"name":"u64"}}],[3,"SecretService","secret","A SecretService object represents the Secret Service implementation which runs as a D-Bus service.\nIn order to securely transfer secrets to the Sercret Service, a session is established. This will automatically be done when calling `SecretService::get()`\nTo search for items, use the `search()` method.\nMultiple collections can exist in the Secret Service, each of which contains secret items. To access the list of Collections, use `get_collections()`.\nCertain actions on the Secret Service require user prompting to complete, such as creating a collection, or unlocking a collection. When such a prompt is necessary, then a SecretPrompt object is created by libsecret, and passed to the secret_service_prompt() method. In this way it is handled automatically.",null,null],[3,"SecretCollection","","SecretCollection represents a collection of secret items stored in the Secret Service.\nA collection can be in a locked or unlocked state. Use `Lock::lock()` or `Lock::unlock()` to lock or unlock the collection.\nUse `get_items()` to lookup the items in the collection. There may not be any items exposed when the collection is locked.",null,null],[3,"SecretItem","","SecretItem represents a secret item stored in the Secret Service.\nEach item has a value, represented by a SecretValue, which can be retrieved by `get_secret()` or set by `set_secret()`. The item is only available when the item is not locked.\nItems can be locked or unlocked using the `Lock::lock()` or `Lock::unlock()` functions. The Lock trait is implemented by SecretItem. The Secret Service may not be able to unlock individual items, and may unlock an entire collection when a single item is unlocked.\nEach item has a set of attributes, which are used to locate the item later. These are not stored or transferred in a secure manner. Each attribute has a string name and a string value. Use `SecretService::search()` to search for items based on their attributes, and `set_attributes()` to change the attributes associated with an item.\nItems can be created with `create()` or `SecretService::store()`.",null,null],[3,"SecretValue","","A SecretValue contains a password or other secret value.\nUse `SecretValue::get()` to get the actual secret data, such as a password. This library only supports content type `text/plain` for now.",null,null],[11,"get","","Constructs a new SecretService which has established a session and whose collections are loaded.\nThe underlying FFI object might be identical for multiple instances of this struct.",0,{"inputs":[{"name":"secretservice"}],"output":{"name":"secretresult"}}],[11,"is_session_established","","Returns if a session to the SecretService is currently established.",0,{"inputs":[{"name":"secretservice"}],"output":{"name":"bool"}}],[11,"are_collections_loaded","","Returns if the Service's collections are loaded.",0,{"inputs":[{"name":"secretservice"}],"output":{"name":"bool"}}],[11,"get_session_algorithms","","Get the set of algorithms being used to transfer secrets between this secret service proxy and the Secret Service itself.\nThe contained String has the format \"algorithm-algorithm-algorithm-...\"",0,{"inputs":[{"name":"secretservice"}],"output":{"name":"string"}}],[11,"get_collections","","Get the collections of the Service.\nA collection contains multiple SecretItems.",0,{"inputs":[{"name":"secretservice"}],"output":{"name":"vec"}}],[11,"search","","Search for items matching the attributes. All collections are searched. The attributes should be a table of string keys and string values.",0,{"inputs":[{"name":"secretservice"},{"name":"hashmap"}],"output":{"name":"secretresult"}}],[11,"store","","Store a secret value in the secret service.\nThe `attributes` should be a set of key and value string pairs.\nIf the attributes match a secret item already stored in the collection, then the item will be updated with these new values.\n`collection` is a collection alias, or `None` to store the value in the default collection (TODO: What about session storage?)\n`label` specifies a label for the secret.\n`value` is the actual secret to store. This can be created with `SecretValue::new()`.",0,{"inputs":[{"name":"secretservice"},{"name":"hashmap"},{"name":"option"},{"name":"str"},{"name":"secretvalue"}],"output":{"name":"secretresult"}}],[11,"clear","","Remove unlocked items which match the attributes from the secret service.\nThe attributes should be a set of key and value string pairs.",0,{"inputs":[{"name":"secretservice"},{"name":"hashmap"}],"output":{"name":"secretresult"}}],[11,"ensure_session","","Ensures that a session is established.",0,{"inputs":[{"name":"secretservice"}],"output":{"name":"secretresult"}}],[11,"load_collections","","Ensures that the collections are loaded.",0,{"inputs":[{"name":"secretservice"}],"output":{"name":"secretresult"}}],[11,"static_type","","",0,{"inputs":[{"name":"secretservice"}],"output":{"name":"type"}}],[11,"wrap","","",0,{"inputs":[{"name":"secretservice"},{"name":"ref"}],"output":{"name":"self"}}],[11,"as_ref","","",0,{"inputs":[{"name":"secretservice"}],"output":{"name":"ref"}}],[11,"unwrap","","",0,{"inputs":[{"name":"secretservice"}],"output":{"name":"ref"}}],[11,"for_alias","","Lookup which collection is assigned to this alias.\nAliases help determine well known collections, such as 'default'.\nReturns the collection, or NULL if none assigned to the alias.",1,{"inputs":[{"name":"secretcollection"},{"name":"str"}],"output":{"name":"secretresult"}}],[11,"create","","Create a new collection in the secret service.\nIf you specify an alias and a collection with that alias already exists, then a new collection will not be created. The previous one will be returned instead.\nReturns the created Collection.",1,{"inputs":[{"name":"secretcollection"},{"name":"str"},{"name":"option"}],"output":{"name":"secretresult"}}],[11,"delete","","Delete this collection.\nThe Secret Service may prompt the user.",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"secretresult"}}],[11,"get_created","","Get the created date and time of the collection.\nThe return value is the number of seconds since the unix epoch, January 1st 1970.",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"u64"}}],[11,"get_modified","","Get the modified date and time of the collection.\nThe return value is the number of seconds since the unix epoch, January 1st 1970.",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"u64"}}],[11,"get_service","","Get the Secret Service object that this collection was created with.",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"secretservice"}}],[11,"are_items_loaded","","Get if the items are currently loaded. Use `load_items()` to load them.",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"bool"}}],[11,"get_label","","Get the label of this collection.",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"string"}}],[11,"get_items","","Get the SecretItems of the collection",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"vec"}}],[11,"load_items","","Ensure that the SecretCollection proxy has loaded all the items present in the Secret Service.",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"secretresult"}}],[11,"set_alias","","Assign the collection to this alias. Aliases help determine well known collections, such as 'default'.",1,{"inputs":[{"name":"secretcollection"},{"name":"str"}],"output":{"name":"secretresult"}}],[11,"is_locked","","Check if the collection is currently locked.",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"bool"}}],[11,"static_type","","",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"type"}}],[11,"wrap","","",1,{"inputs":[{"name":"secretcollection"},{"name":"ref"}],"output":{"name":"self"}}],[11,"as_ref","","",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"ref"}}],[11,"unwrap","","",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"ref"}}],[11,"lock","","",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"secretresult"}}],[11,"unlock","","",1,{"inputs":[{"name":"secretcollection"}],"output":{"name":"secretresult"}}],[11,"create","","Create a new item in the secret service.\ncollection: a secret collection to create this item in\nattributes: attributes for the new item.\nlabel: label for the new item\nvalue: secret value for the new item",2,{"inputs":[{"name":"secretitem"},{"name":"secretcollection"},{"name":"hashmap"},{"name":"str"},{"name":"secretvalue"}],"output":{"name":"secretresult"}}],[11,"delete","","Delete this secret item.",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"secretresult"}}],[11,"get_schema_name","","Get the name of the attribute schema.",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"string"}}],[11,"get_created","","Get the created date and time of the item.\nThe return value is the number of seconds since the unix epoch, January 1st 1970.",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"u64"}}],[11,"get_modified","","Get the modified date and time of the item.\nThe return value is the number of seconds since the unix epoch, January 1st 1970.",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"u64"}}],[11,"get_label","","Get the label of the item.",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"string"}}],[11,"get_service","","Get the SecretService this item was created with.",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"secretservice"}}],[11,"load_secret","","Ensure that the SecretValue of this item is loaded.",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"secretresult"}}],[11,"get_secret","","Get the SecretValue of this item. The item must be unlocked and the value must be loaded.",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"option"}}],[11,"set_secret","","Set the secret value of this item.\nEach item has a single secret which might be a password or some other secret binary value (not supported yet).",2,{"inputs":[{"name":"secretitem"},{"name":"secretvalue"}],"output":{"name":"secretresult"}}],[11,"get_attributes","","Get the attributes of this item.",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"hashmap"}}],[11,"set_attributes","","Set the attributes of this item.",2,{"inputs":[{"name":"secretitem"},{"name":"hashmap"}],"output":{"name":"secretresult"}}],[11,"is_locked","","Check if the item is currently locked.",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"bool"}}],[11,"static_type","","",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"type"}}],[11,"wrap","","",2,{"inputs":[{"name":"secretitem"},{"name":"ref"}],"output":{"name":"self"}}],[11,"as_ref","","",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"ref"}}],[11,"unwrap","","",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"ref"}}],[11,"lock","","",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"secretresult"}}],[11,"unlock","","",2,{"inputs":[{"name":"secretitem"}],"output":{"name":"secretresult"}}],[11,"new","","Create a SecretValue for the secret data passed in.\nThis method will *NOT* create the actual secret in the backing Secret Service. (see SecretService.store() for that)\nThe secret data is copied into non-pageable 'secure' memory.",3,{"inputs":[{"name":"secretvalue"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_glib_full","","Transfer ownership of a raw SecretValue pointer to rust.",3,null],[11,"to_glib_none","","None-transfer to glib.",3,null],[11,"get","","Get the secret data in the SecretValue.\nFor now, this method only supports String values.\nReturns None, if the content type is npt text/plain",3,{"inputs":[{"name":"secretvalue"}],"output":{"name":"option"}}],[11,"get_content_type","","Get the content type of the secret value, such as `text/plain`.",3,{"inputs":[{"name":"secretvalue"}],"output":{"name":"string"}}],[11,"static_type","","",3,{"inputs":[{"name":"secretvalue"}],"output":{"name":"type"}}],[11,"clone","","",3,{"inputs":[{"name":"secretvalue"}],"output":{"name":"self"}}],[11,"drop","","",3,{"inputs":[{"name":"secretvalue"}],"output":null}],[6,"SecretResult","","A Result which may contain an error from the SecretService backend.",null,null],[8,"Lock","","This Trait is implemented by objects which can be locked and unlocked",null,null],[10,"lock","","Lock the object.",4,{"inputs":[{"name":"lock"}],"output":{"name":"secretresult"}}],[10,"unlock","","Unlock the object",4,{"inputs":[{"name":"lock"}],"output":{"name":"secretresult"}}]],"paths":[[3,"SecretService"],[3,"SecretCollection"],[3,"SecretItem"],[3,"SecretValue"],[8,"Lock"]]};
searchIndex['libsecret_sys'] = {"items":[[0,"","libsecret_sys","",null,null],[3,"GCancellable","","",null,null],[3,"SecretService","","",null,null],[3,"SecretSchema","","",null,null],[3,"SecretCollection","","",null,null],[3,"SecretItem","","",null,null],[3,"SecretValue","","",null,null],[5,"secret_service_get_sync","","",null,null],[5,"secret_service_disconnect","","",null,null],[5,"secret_service_open_sync","","",null,null],[5,"secret_service_get_collections","","",null,null],[5,"secret_service_get_flags","","",null,null],[5,"secret_service_get_session_algorithms","","",null,null],[5,"secret_service_ensure_session_sync","","",null,null],[5,"secret_service_load_collections_sync","","",null,null],[5,"secret_service_search_sync","","",null,null],[5,"secret_service_lock_sync","","",null,null],[5,"secret_service_unlock_sync","","",null,null],[5,"secret_service_store_sync","","",null,null],[5,"secret_service_lookup_sync","","",null,null],[5,"secret_service_clear_sync","","",null,null],[5,"secret_service_set_alias_sync","","",null,null],[5,"secret_service_get_collection_gtype","","",null,null],[5,"secret_service_get_item_gtype","","",null,null],[5,"secret_service_get_type","","",null,null],[5,"secret_collection_for_alias_sync","","",null,null],[5,"secret_collection_load_items_sync","","",null,null],[5,"secret_collection_create_sync","","",null,null],[5,"secret_collection_search_sync","","",null,null],[5,"secret_collection_delete_sync","","",null,null],[5,"secret_collection_get_created","","",null,null],[5,"secret_collection_get_service","","",null,null],[5,"secret_collection_get_flags","","",null,null],[5,"secret_collection_get_items","","",null,null],[5,"secret_collection_get_label","","",null,null],[5,"secret_collection_set_label_sync","","",null,null],[5,"secret_collection_get_locked","","",null,null],[5,"secret_collection_get_modified","","",null,null],[5,"secret_collection_refresh","","",null,null],[5,"secret_collection_get_type","","",null,null],[5,"secret_item_create_sync","","",null,null],[5,"secret_item_delete_sync","","",null,null],[5,"secret_item_get_schema_name","","",null,null],[5,"secret_item_get_attributes","","",null,null],[5,"secret_item_set_attributes_sync","","",null,null],[5,"secret_item_get_created","","",null,null],[5,"secret_item_get_label","","",null,null],[5,"secret_item_set_label_sync","","",null,null],[5,"secret_item_get_flags","","",null,null],[5,"secret_item_get_locked","","",null,null],[5,"secret_item_get_modified","","",null,null],[5,"secret_item_get_service","","",null,null],[5,"secret_item_get_secret","","",null,null],[5,"secret_item_load_secret_sync","","",null,null],[5,"secret_item_load_secrets_sync","","",null,null],[5,"secret_item_set_secret_sync","","",null,null],[5,"secret_item_refresh","","",null,null],[5,"secret_item_get_type","","",null,null],[5,"secret_value_new","","",null,null],[5,"secret_value_get","","",null,null],[5,"secret_value_get_text","","",null,null],[5,"secret_value_get_content_type","","",null,null],[5,"secret_value_ref","","",null,null],[5,"secret_value_unref","","",null,null],[5,"secret_value_get_type","","",null,null],[6,"gchar","","",null,null],[6,"gint","","",null,null],[6,"guint","","",null,null],[6,"guint64","","",null,null],[6,"gssize","","",null,null]],"paths":[]};
searchIndex['glib'] = {"items":[[0,"","glib","Bindings and wrappers for __GLib__",null,null],[0,"ffi","","",null,null],[6,"GQuark","glib::ffi","",null,null],[6,"gsize","","",null,null],[6,"GType","","",null,null],[6,"gboolean","","",null,null],[17,"GFALSE","","",null,null],[17,"GTRUE","","",null,null],[6,"gconstpointer","","",null,null],[6,"gpointer","","",null,null],[6,"GSourceFunc","","",null,null],[6,"GCallback","","",null,null],[6,"GClosureNotify","","",null,null],[6,"GDestroyNotify","","",null,null],[6,"GHashFunc","","",null,null],[6,"GEqualFunc","","",null,null],[6,"GHFunc","","",null,null],[3,"GAppInfo","","",null,null],[3,"GValue","","",null,null],[3,"GList","","",null,null],[12,"data","","",0,null],[12,"next","","",0,null],[12,"prev","","",0,null],[3,"GSList","","",null,null],[12,"data","","",1,null],[12,"next","","",1,null],[3,"GError","","",null,null],[12,"domain","","",2,null],[12,"code","","",2,null],[12,"message","","",2,null],[3,"GPermission","","",null,null],[3,"GObject","","",null,null],[3,"GMainLoop","","",null,null],[3,"GMainContext","","",null,null],[3,"GSource","","",null,null],[3,"GPid","","",null,null],[3,"GPollFD","","",null,null],[3,"GDate","","Represents a day between January 1, Year 1 and a few thousand years in the future. None of its members should be accessed directly.",null,null],[3,"GHashTable","","",null,null],[17,"G_TYPE_FUNDAMENTAL_SHIFT","","",null,null],[17,"G_TYPE_INVALID","","",null,null],[17,"G_TYPE_NONE","","",null,null],[17,"G_TYPE_INTERFACE","","",null,null],[17,"G_TYPE_CHAR","","",null,null],[17,"G_TYPE_UCHAR","","",null,null],[17,"G_TYPE_BOOLEAN","","",null,null],[17,"G_TYPE_INT","","",null,null],[17,"G_TYPE_UINT","","",null,null],[17,"G_TYPE_LONG","","",null,null],[17,"G_TYPE_ULONG","","",null,null],[17,"G_TYPE_INT64","","",null,null],[17,"G_TYPE_UINT64","","",null,null],[17,"G_TYPE_ENUM","","",null,null],[17,"G_TYPE_FLAGS","","",null,null],[17,"G_TYPE_FLOAT","","",null,null],[17,"G_TYPE_DOUBLE","","",null,null],[17,"G_TYPE_STRING","","",null,null],[17,"G_TYPE_POINTER","","",null,null],[17,"G_TYPE_BOXED","","",null,null],[17,"G_TYPE_PARAM","","",null,null],[17,"G_TYPE_OBJECT","","",null,null],[17,"G_TYPE_VARIANT","","",null,null],[5,"g_free","","",null,null],[5,"g_strndup","","",null,null],[5,"g_slist_free","","",null,null],[5,"g_slist_append","","",null,null],[5,"g_slist_prepend","","",null,null],[5,"g_slist_insert","","",null,null],[5,"g_slist_concat","","",null,null],[5,"g_slist_nth_data","","",null,null],[5,"g_slist_length","","",null,null],[5,"g_slist_last","","",null,null],[5,"g_slist_copy","","",null,null],[5,"g_slist_reverse","","",null,null],[5,"g_slist_remove","","",null,null],[5,"g_slist_remove_all","","",null,null],[5,"g_slist_remove_link","","",null,null],[5,"g_slist_delete_link","","",null,null],[5,"g_slist_find","","",null,null],[5,"g_slist_position","","",null,null],[5,"g_list_free","","",null,null],[5,"g_list_append","","",null,null],[5,"g_list_prepend","","",null,null],[5,"g_list_insert","","",null,null],[5,"g_list_concat","","",null,null],[5,"g_list_nth_data","","",null,null],[5,"g_list_length","","",null,null],[5,"g_list_last","","",null,null],[5,"g_list_first","","",null,null],[5,"g_list_copy","","",null,null],[5,"g_list_reverse","","",null,null],[5,"g_list_remove","","",null,null],[5,"g_list_remove_all","","",null,null],[5,"g_list_remove_link","","",null,null],[5,"g_list_delete_link","","",null,null],[5,"g_list_find","","",null,null],[5,"g_list_position","","",null,null],[5,"g_app_info_get_type","","",null,{"inputs":[],"output":{"name":"u64"}}],[5,"g_error_new_literal","","",null,null],[5,"g_error_free","","",null,null],[5,"g_error_copy","","",null,null],[5,"g_error_matches","","",null,null],[5,"g_set_error_literal","","",null,null],[5,"g_propagate_error","","",null,null],[5,"g_clear_error","","",null,null],[5,"g_permission_get_allowed","","",null,null],[5,"g_permission_get_can_acquire","","",null,null],[5,"g_permission_get_can_release","","",null,null],[5,"g_permission_impl_update","","",null,null],[5,"g_object_ref","","",null,null],[5,"g_object_ref_sink","","",null,null],[5,"g_object_unref","","",null,null],[5,"glue_signal_connect","","",null,null],[5,"g_type_check_instance_is_a","","",null,null],[5,"create_gvalue","","",null,null],[5,"get_gtype","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[5,"g_value_init","","",null,null],[5,"g_value_reset","","",null,null],[5,"g_value_unset","","",null,null],[5,"g_strdup_value_contents","","",null,null],[5,"g_value_set_boolean","","",null,null],[5,"g_value_get_boolean","","",null,null],[5,"g_value_set_schar","","",null,null],[5,"g_value_get_schar","","",null,null],[5,"g_value_set_uchar","","",null,null],[5,"g_value_get_uchar","","",null,null],[5,"g_value_set_int","","",null,null],[5,"g_value_get_int","","",null,null],[5,"g_value_set_uint","","",null,null],[5,"g_value_get_uint","","",null,null],[5,"g_value_set_long","","",null,null],[5,"g_value_get_long","","",null,null],[5,"g_value_set_ulong","","",null,null],[5,"g_value_get_ulong","","",null,null],[5,"g_value_set_int64","","",null,null],[5,"g_value_get_int64","","",null,null],[5,"g_value_set_uint64","","",null,null],[5,"g_value_get_uint64","","",null,null],[5,"g_value_set_float","","",null,null],[5,"g_value_get_float","","",null,null],[5,"g_value_set_double","","",null,null],[5,"g_value_get_double","","",null,null],[5,"g_value_set_enum","","",null,null],[5,"g_value_get_enum","","",null,null],[5,"g_value_set_flags","","",null,null],[5,"g_value_get_flags","","",null,null],[5,"g_value_set_string","","",null,null],[5,"g_value_set_static_string","","",null,null],[5,"g_value_get_string","","",null,null],[5,"g_value_dup_string","","",null,null],[5,"g_value_set_boxed","","",null,null],[5,"g_value_set_static_boxed","","",null,null],[5,"g_value_get_boxed","","",null,null],[5,"g_value_set_pointer","","",null,null],[5,"g_value_get_pointer","","",null,null],[5,"g_value_set_object","","",null,null],[5,"g_value_take_object","","",null,null],[5,"g_value_get_object","","",null,null],[5,"g_value_set_gtype","","",null,null],[5,"g_value_get_gtype","","",null,null],[5,"g_value_type_compatible","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"i32"}}],[5,"g_value_type_transformable","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"i32"}}],[5,"g_main_loop_new","","",null,null],[5,"g_main_loop_ref","","",null,null],[5,"g_main_loop_unref","","",null,null],[5,"g_main_loop_run","","",null,null],[5,"g_main_loop_quit","","",null,null],[5,"g_main_loop_is_running","","",null,null],[5,"g_main_loop_get_context","","",null,null],[5,"g_main_context_new","","",null,null],[5,"g_main_context_ref","","",null,null],[5,"g_main_context_unref","","",null,null],[5,"g_main_context_default","","",null,null],[5,"g_main_context_iteration","","",null,null],[5,"g_main_context_pending","","",null,null],[5,"g_main_context_find_source_by_id","","",null,null],[5,"g_main_context_find_source_by_user_data","","",null,null],[5,"g_main_context_wakeup","","",null,null],[5,"g_main_context_acquire","","",null,null],[5,"g_main_context_release","","",null,null],[5,"g_main_context_is_owner","","",null,null],[5,"g_main_context_prepare","","",null,null],[5,"g_main_context_dispatch","","",null,null],[5,"g_main_context_add_poll","","",null,null],[5,"g_main_context_remove_poll","","",null,null],[5,"g_main_depth","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"g_main_current_source","","",null,null],[5,"g_main_context_get_thread_default","","",null,null],[5,"g_main_context_ref_thread_default","","",null,null],[5,"g_main_context_push_thread_default","","",null,null],[5,"g_main_context_pop_thread_default","","",null,null],[5,"g_timeout_source_new","","",null,null],[5,"g_timeout_source_new_seconds","","",null,null],[5,"g_timeout_add_full","","",null,null],[5,"g_timeout_add_seconds_full","","",null,null],[5,"g_idle_source_new","","",null,null],[5,"g_idle_add_full","","",null,null],[5,"g_idle_remove_by_data","","",null,null],[5,"g_child_watch_source_new","","",null,null],[5,"g_poll","","",null,null],[5,"g_source_ref","","",null,null],[5,"g_source_unref","","",null,null],[5,"g_source_attach","","",null,null],[5,"g_source_destroy","","",null,null],[5,"g_source_is_destroyed","","",null,null],[5,"g_source_set_priority","","",null,null],[5,"g_source_get_priority","","",null,null],[5,"g_source_set_can_recurse","","",null,null],[5,"g_source_get_can_recurse","","",null,null],[5,"g_source_get_id","","",null,null],[5,"g_source_get_name","","",null,null],[5,"g_source_set_name","","",null,null],[5,"g_source_set_name_by_id","","",null,null],[5,"g_source_get_context","","",null,null],[5,"g_source_set_ready_time","","",null,null],[5,"g_source_get_ready_time","","",null,null],[5,"g_source_add_poll","","",null,null],[5,"g_source_remove_poll","","",null,null],[5,"g_source_add_child_source","","",null,null],[5,"g_source_remove_child_source","","",null,null],[5,"g_source_get_time","","",null,null],[5,"g_source_remove","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"g_source_remove_by_user_data","","",null,null],[5,"g_signal_connect_data","","",null,null],[5,"g_get_current_time","","",null,null],[5,"g_usleep","","",null,null],[5,"g_get_monotonic_time","","",null,{"inputs":[],"output":{"name":"i64"}}],[5,"g_get_real_time","","",null,{"inputs":[],"output":{"name":"i64"}}],[5,"g_date_get_days_in_month","","",null,{"inputs":[{"name":"i32"},{"name":"u16"}],"output":{"name":"u8"}}],[5,"g_date_is_leap_year","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i32"}}],[5,"g_date_get_monday_weeks_in_year","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u8"}}],[5,"g_date_get_sunday_weeks_in_year","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u8"}}],[5,"g_date_valid_day","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"g_date_valid_month","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"g_date_valid_year","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"i32"}}],[5,"g_date_valid_dmy","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"u16"}],"output":{"name":"i32"}}],[5,"g_date_valid_julian","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"g_date_valid_weekday","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"g_date_new","","",null,null],[5,"g_date_new_dmy","","",null,null],[5,"g_date_new_julian","","",null,null],[5,"g_date_clear","","",null,null],[5,"g_date_free","","",null,null],[5,"g_date_set_day","","",null,null],[5,"g_date_set_month","","",null,null],[5,"g_date_set_year","","",null,null],[5,"g_date_set_dmy","","",null,null],[5,"g_date_set_julian","","",null,null],[5,"g_date_set_time_t","","",null,null],[5,"g_date_set_time_val","","",null,null],[5,"g_date_set_parse","","",null,null],[5,"g_date_add_days","","",null,null],[5,"g_date_subtract_days","","",null,null],[5,"g_date_add_months","","",null,null],[5,"g_date_subtract_months","","",null,null],[5,"g_date_add_years","","",null,null],[5,"g_date_subtract_years","","",null,null],[5,"g_date_days_between","","",null,null],[5,"g_date_compare","","",null,null],[5,"g_date_clamp","","",null,null],[5,"g_date_order","","",null,null],[5,"g_date_get_day","","",null,null],[5,"g_date_get_month","","",null,null],[5,"g_date_get_year","","",null,null],[5,"g_date_get_julian","","",null,null],[5,"g_date_get_weekday","","",null,null],[5,"g_date_get_day_of_year","","",null,null],[5,"g_date_is_first_of_month","","",null,null],[5,"g_date_is_last_of_month","","",null,null],[5,"g_date_get_monday_week_of_year","","",null,null],[5,"g_date_get_sunday_week_of_year","","",null,null],[5,"g_date_get_iso8601_week_of_year","","",null,null],[5,"g_date_strftime","","",null,null],[5,"g_date_valid","","",null,null],[5,"g_time_val_add","","",null,null],[5,"g_time_val_from_iso8601","","",null,null],[5,"g_time_val_to_iso8601","","",null,null],[5,"g_hash_table_new","","",null,null],[5,"g_hash_table_new_full","","",null,null],[5,"g_hash_table_insert","","",null,null],[5,"g_hash_table_replace","","",null,null],[5,"g_hash_table_add","","",null,null],[5,"g_hash_table_contains","","",null,null],[5,"g_hash_table_size","","",null,null],[5,"g_hash_table_lookup","","",null,null],[5,"g_hash_table_lookup_extended","","",null,null],[5,"g_hash_table_foreach","","",null,null],[5,"g_hash_table_remove","","",null,null],[5,"g_hash_table_steal","","",null,null],[5,"g_hash_table_remove_all","","",null,null],[5,"g_hash_table_steal_all","","",null,null],[5,"g_hash_table_get_keys","","",null,null],[5,"g_hash_table_get_values","","",null,null],[5,"g_hash_table_get_keys_as_array","","",null,null],[5,"g_hash_table_destroy","","",null,null],[5,"g_hash_table_ref","","",null,null],[5,"g_hash_table_unref","","",null,null],[5,"g_direct_equal","","",null,null],[5,"g_direct_hash","","",null,null],[5,"g_int_equal","","",null,null],[5,"g_int_hash","","",null,null],[5,"g_int64_equal","","",null,null],[5,"g_int64_hash","","",null,null],[5,"g_double_equal","","",null,null],[5,"g_double_hash","","",null,null],[5,"g_str_equal","","",null,null],[5,"g_str_hash","","",null,null],[3,"List","glib","",null,null],[3,"Elem","","",null,null],[3,"RevElem","","",null,null],[3,"SList","","",null,null],[3,"SElem","","",null,null],[3,"Error","","The Error structure contains information about an error that has occurred.",null,null],[3,"Permission","","",null,null],[3,"Value","","Possible improvement : store a function pointer inside the struct and make the struct\ntemplated",null,null],[3,"TypeInterface","","",null,null],[3,"TypeInstance","","",null,null],[3,"TypeClass","","",null,null],[3,"ParamSpec","","",null,null],[4,"ParamFlags","","",null,null],[13,"Readable","","",3,null],[13,"Writable","","",3,null],[13,"ReadWrite","","",3,null],[13,"Construct","","",3,null],[13,"ConstructOnly","","",3,null],[13,"LaxValidation","","",3,null],[13,"StaticName","","",3,null],[13,"Private","","",3,null],[13,"StaticNick","","",3,null],[13,"StaticBlurb","","",3,null],[13,"Deprecated","","",3,null],[5,"to_gboolean","","",null,{"inputs":[{"name":"bool"}],"output":{"name":"gboolean"}}],[5,"to_bool","","",null,{"inputs":[{"name":"gboolean"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"from_vec","","",4,{"inputs":[{"name":"list"},{"name":"vec"}],"output":{"name":"list"}}],[11,"from_slice","","",4,null],[11,"append","","",4,{"inputs":[{"name":"list"},{"name":"t"}],"output":null}],[11,"prepend","","",4,{"inputs":[{"name":"list"},{"name":"t"}],"output":null}],[11,"nth","","",4,{"inputs":[{"name":"list"},{"name":"u32"}],"output":{"name":"t"}}],[11,"last","","",4,{"inputs":[{"name":"list"}],"output":{"name":"t"}}],[11,"first","","",4,{"inputs":[{"name":"list"}],"output":{"name":"t"}}],[11,"insert","","",4,{"inputs":[{"name":"list"},{"name":"t"},{"name":"i32"}],"output":null}],[11,"concat","","",4,{"inputs":[{"name":"list"},{"name":"list"}],"output":null}],[11,"reverse","","",4,{"inputs":[{"name":"list"}],"output":null}],[11,"iter","","",4,{"inputs":[{"name":"list"}],"output":{"name":"elem"}}],[11,"rev_iter","","",4,{"inputs":[{"name":"list"}],"output":{"name":"revelem"}}],[11,"len","","",4,{"inputs":[{"name":"list"}],"output":{"name":"usize"}}],[11,"clear","","",4,{"inputs":[{"name":"list"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"list"},{"name":"it"}],"output":null}],[11,"index","","",4,{"inputs":[{"name":"list"},{"name":"usize"}],"output":{"name":"t"}}],[11,"next","","",5,{"inputs":[{"name":"elem"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"revelem"}],"output":{"name":"option"}}],[11,"from_iter","","",4,{"inputs":[{"name":"list"},{"name":"it"}],"output":{"name":"list"}}],[11,"clone","","",4,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"drop","","",4,{"inputs":[{"name":"list"}],"output":null}],[11,"wrap","","",4,null],[11,"unwrap","","",4,null],[11,"new","","",7,{"inputs":[{"name":"slist"}],"output":{"name":"slist"}}],[11,"from_vec","","",7,{"inputs":[{"name":"slist"},{"name":"vec"}],"output":{"name":"slist"}}],[11,"from_slice","","",7,null],[11,"append","","",7,{"inputs":[{"name":"slist"},{"name":"t"}],"output":null}],[11,"prepend","","",7,{"inputs":[{"name":"slist"},{"name":"t"}],"output":null}],[11,"nth","","",7,{"inputs":[{"name":"slist"},{"name":"u32"}],"output":{"name":"t"}}],[11,"last","","",7,{"inputs":[{"name":"slist"}],"output":{"name":"t"}}],[11,"insert","","",7,{"inputs":[{"name":"slist"},{"name":"t"},{"name":"i32"}],"output":null}],[11,"concat","","",7,{"inputs":[{"name":"slist"},{"name":"slist"}],"output":null}],[11,"reverse","","",7,{"inputs":[{"name":"slist"}],"output":null}],[11,"iter","","",7,{"inputs":[{"name":"slist"}],"output":{"name":"selem"}}],[11,"len","","",7,{"inputs":[{"name":"slist"}],"output":{"name":"usize"}}],[11,"clear","","",7,{"inputs":[{"name":"slist"}],"output":null}],[11,"extend","","",7,{"inputs":[{"name":"slist"},{"name":"it"}],"output":null}],[11,"index","","",7,{"inputs":[{"name":"slist"},{"name":"usize"}],"output":{"name":"t"}}],[11,"next","","",8,{"inputs":[{"name":"selem"}],"output":{"name":"option"}}],[11,"from_iter","","",7,{"inputs":[{"name":"slist"},{"name":"it"}],"output":{"name":"slist"}}],[11,"clone","","",7,{"inputs":[{"name":"slist"}],"output":{"name":"slist"}}],[11,"drop","","",7,{"inputs":[{"name":"slist"}],"output":null}],[11,"wrap","","",7,null],[11,"unwrap","","",7,null],[0,"glib_container","","",null,null],[8,"GlibContainer","glib::glib_container","",null,null],[10,"wrap","","",9,{"inputs":[{"name":"glibcontainer"},{"name":"i"}],"output":{"name":"self"}}],[10,"unwrap","","",9,{"inputs":[{"name":"glibcontainer"}],"output":{"name":"i"}}],[11,"new_literal","glib","Creates a new Error; unlike Error::new(), message is not a printf()-style format string.\nUse this function if message contains text you don't have control over, that could include\nprintf() escape sequences.",10,{"inputs":[{"name":"error"},{"name":"gquark"},{"name":"i32"},{"name":"str"}],"output":{"name":"option"}}],[11,"release","","Frees an Error struct and associated resources.",10,null],[11,"matches","","Returns true if error matches domain and code , false otherwise. In particular, when error.pointer\nis NULL, false will be returned.",10,{"inputs":[{"name":"error"},{"name":"gquark"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"set","","Does nothing if self.pointer is NULL; if self.pointer is non-NULL, then *self.pointer must be NULL.\nA new GError is created and assigned to *self.pointer .",10,null],[11,"propagate","","If other.pointer is NULL, free self ; otherwise, moves self into other. The error variable\nother.pointer points to must be NULL.",10,null],[11,"message","","Returns the error message stored in the wrapped GError",10,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"clone","","",10,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"drop","","",10,{"inputs":[{"name":"error"}],"output":null}],[11,"wrap","","",10,null],[11,"unwrap","","",10,null],[11,"get_allowed","","Gets the value of the 'allowed' property. This property is true if the caller\ncurrently has permission to perform the action that permission represents the\npermission to perform.",11,{"inputs":[{"name":"permission"}],"output":{"name":"bool"}}],[11,"get_can_acquire","","Gets the value of the 'can-acquire' property. This property is true if it is\ngenerally possible to acquire the permission by calling g_permission_acquire().",11,{"inputs":[{"name":"permission"}],"output":{"name":"bool"}}],[11,"get_can_release","","Gets the value of the 'can-release' property. This property is true if it is\ngenerally possible to release the permission by calling g_permission_release().",11,{"inputs":[{"name":"permission"}],"output":{"name":"bool"}}],[11,"impl_update","","This function is called by the GPermission implementation to update the properties\nof the permission. You should never call this function except from a GPermission\nimplementation.",11,{"inputs":[{"name":"permission"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":null}],[11,"wrap","","",11,null],[11,"unwrap","","",11,null],[0,"signal","","",null,null],[5,"connect","glib::signal","",null,null],[0,"source","glib","Manages available sources of events for the main loop",null,null],[3,"Continue","glib::source","Return type of idle and timeout functions.",null,null],[5,"idle_add","","Adds a function to be called whenever there are no higher priority events pending to the default main loop.",null,{"inputs":[{"name":"f"}],"output":{"name":"u32"}}],[5,"timeout_add","","Sets a function to be called at regular intervals, with the default priority, `PRIORITY_DEFAULT`.",null,{"inputs":[{"name":"u32"},{"name":"f"}],"output":{"name":"u32"}}],[5,"timeout_add_seconds","","Sets a function to be called at regular intervals with the default priority, `PRIORITY_DEFAULT`.",null,{"inputs":[{"name":"u32"},{"name":"f"}],"output":{"name":"u32"}}],[11,"to_glib","","",12,{"inputs":[{"name":"continue"}],"output":{"name":"gboolean"}}],[0,"traits","glib","",null,null],[8,"FFIGObject","glib::traits","",null,null],[10,"unwrap_gobject","","",13,null],[10,"wrap_object","","",13,null],[0,"translate","glib","Translation between GLib/GLib-based FFI types and their Rust counterparts.",null,null],[3,"Stash","glib::translate","Helper type that stores temporary values used for translation.",null,null],[3,"PtrArray","","Temporary storage for passing a `NULL` terminated array of pointers.",null,null],[3,"HashTable","","",null,null],[5,"from_glib","","Translate a simple type.",null,{"inputs":[{"name":"g"}],"output":{"name":"t"}}],[5,"from_glib_none","","Translate from a pointer type, transfer: none.",null,{"inputs":[{"name":"p"}],"output":{"name":"t"}}],[5,"from_glib_full","","Translate from a pointer type, transfer: full (assume ownership).",null,{"inputs":[{"name":"p"}],"output":{"name":"t"}}],[8,"Ptr","","A pointer",null,null],[10,"is_null","","",14,{"inputs":[{"name":"ptr"}],"output":{"name":"bool"}}],[10,"from","","",14,null],[8,"ToGlib","","Translate a simple type.",null,null],[16,"GlibType","","",15,null],[10,"to_glib","","",15,{"inputs":[{"name":"toglib"}],"output":{"name":"glibtype"}}],[8,"ToGlibPtr","","Translate to a pointer.",null,null],[16,"Storage","","",16,null],[10,"to_glib_none","","Transfer: none.",16,{"inputs":[{"name":"toglibptr"}],"output":{"name":"stash"}}],[11,"to_glib_full","","Transfer: full.",16,{"inputs":[{"name":"toglibptr"}],"output":{"name":"p"}}],[8,"FromGlib","","Translate a simple type.",null,null],[10,"from_glib","","",17,{"inputs":[{"name":"fromglib"},{"name":"t"}],"output":{"name":"self"}}],[8,"FromGlibPtr","","Translate from a pointer type.",null,null],[10,"from_glib_none","","Transfer: none.",18,{"inputs":[{"name":"fromglibptr"},{"name":"p"}],"output":{"name":"self"}}],[10,"from_glib_full","","Transfer: full.",18,{"inputs":[{"name":"fromglibptr"},{"name":"p"}],"output":{"name":"self"}}],[8,"FromGlibPtrContainer","","Translate from a container of pointers.",null,null],[10,"from_glib_none","","Transfer: none.",19,{"inputs":[{"name":"fromglibptrcontainer"},{"name":"pp"}],"output":{"name":"self"}}],[10,"from_glib_none_num","","Transfer: none.",19,{"inputs":[{"name":"fromglibptrcontainer"},{"name":"pp"},{"name":"usize"}],"output":{"name":"self"}}],[10,"from_glib_container","","Transfer: container.",19,{"inputs":[{"name":"fromglibptrcontainer"},{"name":"pp"}],"output":{"name":"self"}}],[10,"from_glib_container_num","","Transfer: container.",19,{"inputs":[{"name":"fromglibptrcontainer"},{"name":"pp"},{"name":"usize"}],"output":{"name":"self"}}],[10,"from_glib_full","","Transfer: full.",19,{"inputs":[{"name":"fromglibptrcontainer"},{"name":"pp"}],"output":{"name":"self"}}],[10,"from_glib_full_num","","Transfer: full.",19,{"inputs":[{"name":"fromglibptrcontainer"},{"name":"pp"},{"name":"usize"}],"output":{"name":"self"}}],[11,"to_glib_none","core::option","",20,{"inputs":[{"name":"option"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",20,{"inputs":[{"name":"option"}],"output":{"name":"p"}}],[11,"to_glib_none","collections::string","",21,{"inputs":[{"name":"string"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",21,null],[11,"len","glib::translate","Returns the length of the array not counting the `NULL` terminator.",22,{"inputs":[{"name":"ptrarray"}],"output":{"name":"usize"}}],[11,"to_glib_none","std::collections::hash::map","",23,{"inputs":[{"name":"hashmap"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",23,null],[11,"drop","glib::translate","",24,{"inputs":[{"name":"hashtable"}],"output":null}],[11,"from_glib","core::option","",20,{"inputs":[{"name":"option"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_glib","","",20,{"inputs":[{"name":"option"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_glib","","",20,{"inputs":[{"name":"option"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_glib_none","","",20,{"inputs":[{"name":"option"},{"name":"p"}],"output":{"name":"option"}}],[11,"from_glib_full","","",20,{"inputs":[{"name":"option"},{"name":"p"}],"output":{"name":"option"}}],[11,"from_glib_none","collections::string","",21,null],[11,"from_glib_full","","",21,null],[11,"from_glib_none","","",21,null],[11,"from_glib_full","","",21,null],[11,"from_glib_none","collections::vec","",25,null],[11,"from_glib_none_num","","",25,null],[11,"from_glib_container","","",25,null],[11,"from_glib_container_num","","",25,null],[11,"from_glib_full","","",25,null],[11,"from_glib_full_num","","",25,null],[11,"from_glib_none","","",25,null],[11,"from_glib_none_num","","",25,null],[11,"from_glib_container","","",25,null],[11,"from_glib_container_num","","",25,null],[11,"from_glib_full","","",25,null],[11,"from_glib_full_num","","",25,null],[11,"from_glib_none","","",25,null],[11,"from_glib_none_num","","",25,null],[11,"from_glib_container","","",25,null],[11,"from_glib_container_num","","",25,null],[11,"from_glib_full","","",25,null],[11,"from_glib_full_num","","",25,null],[11,"from_glib_none","std::collections::hash::map","",23,null],[11,"from_glib_none_num","","",23,null],[11,"from_glib_container","","",23,null],[11,"from_glib_container_num","","",23,null],[11,"from_glib_full","","",23,null],[11,"from_glib_full_num","","",23,null],[11,"new","glib","",26,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"init","","Initializes value with the default value of type .",26,{"inputs":[{"name":"value"},{"name":"type"}],"output":null}],[11,"reset","","Clears the current value in value and resets it to the default value (as if the\nvalue had just been initialized).",26,{"inputs":[{"name":"value"}],"output":null}],[11,"unset","","Clears the current value in value and \"unsets\" the type, this releases all resources\nassociated with this GValue. An unset value is the same as an uninitialized (zero-filled)\nGValue structure.",26,{"inputs":[{"name":"value"}],"output":null}],[11,"strdup_value_contents","","Return a newly allocated string, which describes the contents of a GValue. The main\npurpose of this function is to describe GValue contents for debugging output, the way\nin which the contents are described may change between different GLib versions.",26,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"set_long","","Set the contents of a G_TYPE_LONG GValue to v_long .",26,{"inputs":[{"name":"value"},{"name":"i64"}],"output":null}],[11,"get_long","","Get the contents of a G_TYPE_LONG GValue.",26,{"inputs":[{"name":"value"}],"output":{"name":"i64"}}],[11,"set_ulong","","Set the contents of a G_TYPE_ULONG GValue to v_ulong .",26,{"inputs":[{"name":"value"},{"name":"u64"}],"output":null}],[11,"get_ulong","","Get the contents of a G_TYPE_ULONG GValue.",26,{"inputs":[{"name":"value"}],"output":{"name":"u64"}}],[11,"set_enum","","Set the contents of a G_TYPE_ENUM GValue to v_enum .",26,{"inputs":[{"name":"value"},{"name":"type"}],"output":null}],[11,"get_enum","","Get the contents of a G_TYPE_ENUM GValue.",26,{"inputs":[{"name":"value"}],"output":{"name":"type"}}],[11,"set_flags","","Set the contents of a G_TYPE_FLAGS GValue to v_flags .",26,{"inputs":[{"name":"value"},{"name":"type"}],"output":null}],[11,"get_flags","","Get the contents of a G_TYPE_FLAGS GValue.",26,{"inputs":[{"name":"value"}],"output":{"name":"type"}}],[11,"get_string","","Get the contents of a G_TYPE_STRING GValue.",26,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"set_boxed","","Set the contents of a G_TYPE_BOXED derived GValue to v_boxed .",26,{"inputs":[{"name":"value"},{"name":"t"}],"output":null}],[11,"get_boxed","","Get the contents of a G_TYPE_BOXED derived GValue.",26,{"inputs":[{"name":"value"}],"output":{"name":"t"}}],[11,"set_pointer","","Set the contents of a pointer GValue to v_pointer .",26,{"inputs":[{"name":"value"},{"name":"t"}],"output":null}],[11,"get_pointer","","Get the contents of a pointer GValue.",26,{"inputs":[{"name":"value"}],"output":{"name":"t"}}],[11,"set_object","","Set the contents of a G_TYPE_OBJECT derived GValue to v_object .",26,{"inputs":[{"name":"value"},{"name":"t"}],"output":null}],[11,"get_object","","Get the contents of a G_TYPE_OBJECT derived GValue.",26,{"inputs":[{"name":"value"}],"output":{"name":"t"}}],[11,"set","","",26,{"inputs":[{"name":"value"},{"name":"t"}],"output":null}],[11,"get","","",26,{"inputs":[{"name":"value"}],"output":{"name":"t"}}],[11,"compatible","","Returns whether a GValue of type src_type can be copied into a GValue of type dest_type .",26,{"inputs":[{"name":"value"},{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"transformable","","Check whether g_value_transform() is able to transform values of type src_type into\nvalues of type dest_type . Note that for the types to be transformable, they must be\ncompatible and a transform function must be registered.",26,{"inputs":[{"name":"value"},{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"as_ptr","","",26,null],[11,"as_mut_ptr","","",26,null],[11,"drop","","",26,{"inputs":[{"name":"value"}],"output":null}],[11,"get","collections::string","",21,{"inputs":[{"name":"string"},{"name":"value"}],"output":{"name":"string"}}],[11,"set","","",21,{"inputs":[{"name":"string"},{"name":"value"}],"output":null}],[0,"object","glib","Types that facilitate representing `GObject` descendants.",null,null],[3,"Ref","glib::object","A reference to any GObject descendant.",null,null],[3,"VirtualRef","","A helper type holding a reference to a specific object or interface.",null,null],[3,"Object","","",null,null],[3,"GenericObject","","The crate-local generic type for `GObject` descendants in GLib.",null,null],[8,"Wrapper","","A wrapper around the `Ref`.",null,null],[16,"GlibType","","The foreign `struct` type corresponding to the object.",27,null],[10,"wrap","","Wraps a `Ref`.",27,{"inputs":[{"name":"wrapper"},{"name":"ref"}],"output":{"name":"self"}}],[10,"as_ref","","Returns a reference to the inner `Ref`.",27,{"inputs":[{"name":"wrapper"}],"output":{"name":"ref"}}],[10,"unwrap","","Transforms into the inner `Ref`.",27,{"inputs":[{"name":"wrapper"}],"output":{"name":"ref"}}],[8,"Upcast","","Declares the \"is a\" relationship.",null,null],[11,"upcast","","Upcasts to a helper type corresponding to `T`.",28,{"inputs":[{"name":"upcast"}],"output":{"name":"virtualref"}}],[8,"Downcast","","A complement to `Upcast` that allows downcasting.",null,null],[10,"downcast","","Tries to downcast to `T`.",29,{"inputs":[{"name":"downcast"}],"output":{"name":"result"}}],[10,"downcast_unchecked","","Downcasts to `T` unconditionally.",29,{"inputs":[{"name":"downcast"}],"output":{"name":"t"}}],[8,"ObjectExt","","",null,null],[11,"eq","","",30,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_glib_none","","Transfer: none constructor.",30,null],[11,"from_glib_full","","Transfer: full constructor.",30,null],[11,"to_glib_none","","Returns a transfer: none raw pointer.",30,null],[11,"to_glib_full","","Returns a transfer: full raw pointer.",30,null],[11,"clone","","",30,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"drop","","",30,{"inputs":[{"name":"ref"}],"output":null}],[11,"to_glib_none","","",31,{"inputs":[{"name":"virtualref"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",31,null],[11,"to_glib_none","core::option","",20,{"inputs":[{"name":"option"}],"output":{"name":"stash"}}],[11,"to_glib_full","","",20,null],[11,"clone","glib::object","",32,{"inputs":[{"name":"object"}],"output":{"name":"object"}}],[11,"wrap","","",32,{"inputs":[{"name":"object"},{"name":"ref"}],"output":{"name":"object"}}],[11,"as_ref","","",32,{"inputs":[{"name":"object"}],"output":{"name":"ref"}}],[11,"unwrap","","",32,{"inputs":[{"name":"object"}],"output":{"name":"ref"}}],[11,"static_type","","",32,{"inputs":[{"name":"object"}],"output":{"name":"type"}}],[11,"fmt","","",33,{"inputs":[{"name":"genericobject"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"wrap","","",33,{"inputs":[{"name":"genericobject"},{"name":"ref"}],"output":{"name":"genericobject"}}],[11,"as_ref","","",33,{"inputs":[{"name":"genericobject"}],"output":{"name":"ref"}}],[11,"unwrap","","",33,{"inputs":[{"name":"genericobject"}],"output":{"name":"ref"}}],[11,"clone","","",33,{"inputs":[{"name":"genericobject"}],"output":{"name":"genericobject"}}],[0,"types","glib","",null,null],[4,"Type","glib::types","A GLib or GLib-based library type",null,null],[13,"Invalid","","An invalid `Type` used as error return value in some functions",34,null],[13,"Unit","","The fundamental type corresponding to the unit type `()`",34,null],[13,"I8","","The fundamental type corresponding to `i8`",34,null],[13,"U8","","The fundamental type corresponding to `u8`",34,null],[13,"Bool","","The fundamental type corresponding to `bool`",34,null],[13,"I32","","The fundamental type corresponding to `i32`",34,null],[13,"U32","","The fundamental type corresponding to `u32`",34,null],[13,"ISize","","The fundamental type corresponding to `isize`",34,null],[13,"USize","","The fundamental type corresponding to `usize`",34,null],[13,"I64","","The fundamental type corresponding to `i64`",34,null],[13,"U64","","The fundamental type corresponding to `u64`",34,null],[13,"F32","","The fundamental type corresponding to `f32`",34,null],[13,"F64","","The fundamental type corresponding to `f64`",34,null],[13,"String","","The fundamental type corresponding to `String`",34,null],[13,"Pointer","","The fundamental type corresponding to a pointer",34,null],[13,"Variant","","The fundamental type of GVariant",34,null],[13,"BaseInterface","","The fundamental type from which all interfaces are derived",34,null],[13,"BaseEnum","","The fundamental type from which all enumeration types are derived",34,null],[13,"BaseFlags","","The fundamental type from which all flags types are derived",34,null],[13,"BaseBoxed","","The fundamental type from which all boxed types are derived",34,null],[13,"BaseParamSpec","","The fundamental type from which all `GParamSpec` types are derived",34,null],[13,"BaseObject","","The fundamental type from which all objects are derived",34,null],[13,"Other","","A non-fundamental type identified by value of type `usize`",34,null],[5,"instance_of","","",null,{"inputs":[{"name":"gconstpointer"}],"output":{"name":"bool"}}],[8,"StaticType","","",null,null],[10,"static_type","","",35,{"inputs":[{"name":"statictype"}],"output":{"name":"type"}}],[8,"InstanceType","","",null,null],[10,"instance_type","","",36,{"inputs":[{"name":"instancetype"}],"output":{"name":"type"}}],[11,"eq","","",34,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"from_glib","","",34,{"inputs":[{"name":"type"},{"name":"gtype"}],"output":{"name":"type"}}],[11,"to_glib","","",34,{"inputs":[{"name":"type"}],"output":{"name":"gtype"}}],[0,"date","glib","Date and Time Functions — calendrical calculations and miscellaneous time stuff",null,null],[3,"Date","glib::date","",null,null],[3,"TimeVal","","Represents a precise time, with seconds and microseconds. Similar to the struct timeval returned by the gettimeofday() UNIX\nsystem call.",null,null],[12,"tv_sec","","seconds",37,null],[12,"tv_usec","","microseconds",37,null],[4,"Month","","Enumeration representing a month; values are G_DATE_JANUARY, G_DATE_FEBRUARY, etc. G_DATE_BAD_MONTH is the invalid value.",null,null],[13,"BadMonth","","invalid value",38,null],[13,"January","","january",38,null],[13,"February","","february",38,null],[13,"March","","march",38,null],[13,"April","","april",38,null],[13,"May","","may",38,null],[13,"June","","june",38,null],[13,"July","","july",38,null],[13,"August","","august",38,null],[13,"September","","september",38,null],[13,"October","","october",38,null],[13,"November","","november",38,null],[13,"December","","december",38,null],[4,"Weekday","","Enumeration representing a day of the week; G_DATE_MONDAY, G_DATE_TUESDAY, etc. G_DATE_BAD_WEEKDAY is an invalid weekday.",null,null],[13,"BadWeekday","","invalid value",39,null],[13,"Monday","","monday",39,null],[13,"Tuesday","","tuesday",39,null],[13,"Wednesday","","wednesday",39,null],[13,"Thursday","","thrusday",39,null],[13,"Friday","","friday",39,null],[13,"Saturday","","saturday",39,null],[13,"Sunday","","sunday",39,null],[5,"get_current_time","","Equivalent to the UNIX gettimeofday() function, but portable.",null,{"inputs":[],"output":{"name":"timeval"}}],[5,"usleep","","Pauses the current thread for the given number of microseconds.",null,{"inputs":[{"name":"u64"}],"output":null}],[5,"get_monotonic_time","","Queries the system monotonic time.",null,{"inputs":[],"output":{"name":"i64"}}],[5,"get_real_time","","Queries the system wall-clock time.",null,{"inputs":[],"output":{"name":"i64"}}],[5,"get_days_in_month","","Returns the number of days in a month, taking leap years into account.",null,{"inputs":[{"name":"month"},{"name":"year"}],"output":{"name":"u8"}}],[5,"is_leap_year","","Returns TRUE if the year is a leap year.",null,{"inputs":[{"name":"year"}],"output":{"name":"bool"}}],[5,"get_monday_weeks_in_year","","Returns the number of weeks in the year, where weeks are taken to start on Monday.\nWill be 52 or 53. The date must be valid. (Years always have 52 7-day periods,\nplus 1 or 2 extra days depending on whether it's a leap year. This function is\nbasically telling you how many Mondays are in the year, i.e. there are 53 Mondays\nif one of the extra days happens to be a Monday.)",null,{"inputs":[{"name":"year"}],"output":{"name":"u8"}}],[5,"get_sunday_weeks_in_year","","Returns the number of weeks in the year, where weeks are taken to start on Sunday.\nWill be 52 or 53. The date must be valid. (Years always have 52 7-day periods, plus\n1 or 2 extra days depending on whether it's a leap year. This function is basically\ntelling you how many Sundays are in the year, i.e. there are 53 Sundays if one of\nthe extra days happens to be a Sunday.)",null,{"inputs":[{"name":"year"}],"output":{"name":"u8"}}],[5,"is_valid_day","","Returns true if the day of the month is valid (a day is valid if it's between 1 and\n31 inclusive).",null,{"inputs":[{"name":"day"}],"output":{"name":"bool"}}],[5,"is_valid_month","","Returns true if the month value is valid. The 12 GDateMonth enumeration values are\nthe only valid months.",null,{"inputs":[{"name":"month"}],"output":{"name":"bool"}}],[5,"is_valid_year","","Returns true if the year is valid. Any year greater than 0 is valid, though there\nis a 16-bit limit to what GDate will understand.",null,{"inputs":[{"name":"year"}],"output":{"name":"bool"}}],[5,"is_valid_dmy","","Returns true if the day-month-year triplet forms a valid, existing day in the range\nof days GDate understands (Year 1 or later, no more than a few thousand years in the\nfuture).",null,{"inputs":[{"name":"day"},{"name":"month"},{"name":"year"}],"output":{"name":"bool"}}],[5,"is_valid_julian","","Returns true if the Julian day is valid. Anything greater than zero is basically a\nvalid Julian, though there is a 32-bit limit.",null,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[5,"is_valid_weekday","","Returns true if the weekday is valid. The seven GDateWeekday enumeration values are\nthe only valid weekdays.",null,{"inputs":[{"name":"weekday"}],"output":{"name":"bool"}}],[6,"Time","","Simply a replacement for time_t. It has been deprecated since it is not equivalent to time_t on 64-bit platforms with a 64-bit time_t.\nUnrelated to GTimer.",null,null],[6,"Year","","Integer representing a year; G_DATE_BAD_YEAR is the invalid value. The year must be 1 or higher; negative (BC) years are not allowed.\nThe year is represented with four digits.",null,null],[6,"Day","","Integer representing a day of the month; between 1 and 31. G_DATE_BAD_DAY represents an invalid day of the month.",null,null],[11,"clone","","",38,{"inputs":[{"name":"month"}],"output":{"name":"month"}}],[11,"clone","","",39,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"new","","Allocates a GDate and initializes it to a sane state. The new date will be cleared\n(as if you'd called g_date_clear()) but invalid (it won't represent an existing day).",40,{"inputs":[{"name":"date"}],"output":{"name":"option"}}],[11,"new_dmy","","Like g_date_new(), but also sets the value of the date. Assuming the day-month-year\ntriplet you pass in represents an existing day, the returned date will be valid.",40,{"inputs":[{"name":"date"},{"name":"day"},{"name":"month"},{"name":"year"}],"output":{"name":"option"}}],[11,"new_julian","","Like g_date_new(), but also sets the value of the date. Assuming the Julian day\nnumber you pass in is valid (greater than 0, less than an unreasonably large\nnumber), the returned date will be valid.",40,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clear","","Initializes one or more GDate structs to a sane but invalid state. The cleared\ndates will not represent an existing date, but will not contain garbage. Useful\nto init a date declared on the stack. Validity can be tested with g_date_valid().",40,{"inputs":[{"name":"date"}],"output":null}],[11,"set_day","","Sets the day of the month for a GDate. If the resulting day-month-year triplet is\ninvalid, the date will be invalid.",40,{"inputs":[{"name":"date"},{"name":"day"}],"output":null}],[11,"set_month","","Sets the month of the year for a GDate. If the resulting day-month-year triplet is\ninvalid, the date will be invalid.",40,{"inputs":[{"name":"date"},{"name":"month"}],"output":null}],[11,"set_year","","Sets the year for a GDate. If the resulting day-month-year triplet is invalid, the\ndate will be invalid.",40,{"inputs":[{"name":"date"},{"name":"year"}],"output":null}],[11,"set_dmy","","Sets the value of a GDate from a day, month, and year. The day-month-year triplet\nmust be valid; if you aren't sure it is, call g_date_valid_dmy() to check before\nyou set it.",40,{"inputs":[{"name":"date"},{"name":"day"},{"name":"month"},{"name":"year"}],"output":null}],[11,"set_julian","","Sets the value of a GDate from a Julian day number.",40,{"inputs":[{"name":"date"},{"name":"u32"}],"output":null}],[11,"set_time_t","","Sets the value of a date to the date corresponding to a time specified as a time_t.\nThe time to date conversion is done using the user's current timezone.\nTo set the value of a date to the current day, you could write:\n```\nDate::new().set_time_t(date, time::get_time().sec);\n```",40,{"inputs":[{"name":"date"},{"name":"i64"}],"output":null}],[11,"set_time_val","","Sets the value of a date from a GTimeVal value. Note that the tv_usec member is ignored,\nbecause GDate can't make use of the additional precision.",40,{"inputs":[{"name":"date"},{"name":"timeval"}],"output":null}],[11,"set_parse","","Parses a user-inputted string str , and try to figure out what date it represents,\ntaking the current locale into account. If the string is successfully parsed, the\ndate will be valid after the call. Otherwise, it will be invalid. You should check\nusing g_date_valid() to see whether the parsing succeeded.",40,{"inputs":[{"name":"date"},{"name":"str"}],"output":null}],[11,"add_days","","Increments a date some number of days. To move forward by weeks, add weeks*7 days. The\ndate must be valid.",40,{"inputs":[{"name":"date"},{"name":"usize"}],"output":null}],[11,"subtract_days","","Moves a date some number of days into the past. To move by weeks, just move by weeks*7\ndays. The date must be valid.",40,{"inputs":[{"name":"date"},{"name":"usize"}],"output":null}],[11,"add_months","","Increments a date by some number of months. If the day of the month is greater than 28,\nthis routine may change the day of the month (because the destination month may not have\nthe current day in it). The date must be valid.",40,{"inputs":[{"name":"date"},{"name":"usize"}],"output":null}],[11,"subtract_months","","Moves a date some number of months into the past. If the current day of the month doesn't\nexist in the destination month, the day of the month may change. The date must be valid.",40,{"inputs":[{"name":"date"},{"name":"usize"}],"output":null}],[11,"add_years","","Increments a date by some number of years. If the date is February 29, and the destination\nyear is not a leap year, the date will be changed to February 28. The date must be valid.",40,{"inputs":[{"name":"date"},{"name":"usize"}],"output":null}],[11,"subtract_years","","Moves a date some number of years into the past. If the current day doesn't exist in the\ndestination year (i.e. it's February 29 and you move to a non-leap-year) then the day is\nchanged to February 29. The date must be valid.",40,{"inputs":[{"name":"date"},{"name":"usize"}],"output":null}],[11,"days_between","","Computes the number of days between two dates. If date2 is prior to date1 , the returned\nvalue is negative. Both dates must be valid.",40,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"isize"}}],[11,"compare","","qsort()-style comparison function for dates. Both dates must be valid.",40,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"isize"}}],[11,"clamp","","If date is prior to min_date , sets date equal to min_date . If date falls after\nmax_date , sets date equal to max_date . Otherwise, date is unchanged. Either of min_date\nand max_date may be NULL. All non-NULL dates must be valid.",40,{"inputs":[{"name":"date"},{"name":"date"},{"name":"date"}],"output":null}],[11,"order","","Checks if date1 is less than or equal to date2 , and swap the values if this is not\nthe case.",40,{"inputs":[{"name":"date"},{"name":"date"}],"output":null}],[11,"get_day","","Returns the day of the month. The date must be valid.",40,{"inputs":[{"name":"date"}],"output":{"name":"day"}}],[11,"get_month","","Returns the month of the year. The date must be valid.",40,{"inputs":[{"name":"date"}],"output":{"name":"month"}}],[11,"get_year","","Returns the year of a GDate. The date must be valid.",40,{"inputs":[{"name":"date"}],"output":{"name":"year"}}],[11,"get_julian","","Returns the Julian day or \"serial number\" of the GDate. The Julian day is simply the\nnumber of days since January 1, Year 1; i.e., January 1, Year 1 is Julian day 1;\nJanuary 2, Year 1 is Julian day 2, etc. The date must be valid.",40,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"get_weekday","","Returns the day of the week for a GDate. The date must be valid.",40,{"inputs":[{"name":"date"}],"output":{"name":"weekday"}}],[11,"get_day_of_year","","Returns the day of the year, where Jan 1 is the first day of the year. The date\nmust be valid.",40,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"is_first_of_month","","Returns true if the date is on the first of a month. The date must be valid.",40,{"inputs":[{"name":"date"}],"output":{"name":"bool"}}],[11,"is_last_of_month","","Returns true if the date is the last day of the month. The date must be valid.",40,{"inputs":[{"name":"date"}],"output":{"name":"bool"}}],[11,"get_monday_week_of_year","","Returns the week of the year, where weeks are understood to start on Monday. If\nthe date is before the first Monday of the year, return ???",40,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"get_sunday_week_of_year","","Returns the week of the year during which this date falls, if weeks are understood\nto being on Sunday. The date must be valid. Can return 0 if the day is before the\nfirst Sunday of the year.",40,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"get_iso8601_week_of_year","","Returns the week of the year, where weeks are interpreted according to ISO 8601.",40,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"is_valid","","Returns TRUE if the GDate represents an existing day. The date must not contain\ngarbage; it should have been initialized with g_date_clear() if it wasn't allocated\nby one of the g_date_new() variants.",40,{"inputs":[{"name":"date"}],"output":{"name":"bool"}}],[11,"drop","","",40,{"inputs":[{"name":"date"}],"output":null}],[11,"add","","Adds the given number of microseconds to self . microseconds can also be negative to\ndecrease the value of self .",37,{"inputs":[{"name":"timeval"},{"name":"u64"}],"output":null}],[11,"from_iso8601","","Converts a string containing an ISO 8601 encoded date and time to a GTimeVal and puts\nit into self .",37,{"inputs":[{"name":"timeval"},{"name":"str"}],"output":null}],[11,"to_iso8601","","Converts time_ into an RFC 3339 encoded string, relative to the Coordinated Universal\nTime (UTC). This is one of the many formats allowed by ISO 8601.",37,{"inputs":[{"name":"timeval"}],"output":{"name":"option"}}],[6,"AppInfo","glib","",null,null],[8,"ValuePublic","","",null,null],[10,"get","","",41,{"inputs":[{"name":"valuepublic"},{"name":"value"}],"output":{"name":"self"}}],[10,"set","","",41,{"inputs":[{"name":"valuepublic"},{"name":"value"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"paramflags"}],"output":{"name":"paramflags"}}],[11,"static_type","","",42,{"inputs":[{"name":"appinfo"}],"output":{"name":"type"}}],[11,"get","glib::types","",34,{"inputs":[{"name":"type"},{"name":"value"}],"output":{"name":"type"}}],[11,"set","","",34,{"inputs":[{"name":"type"},{"name":"value"}],"output":null}]],"paths":[[3,"GList"],[3,"GSList"],[3,"GError"],[4,"ParamFlags"],[3,"List"],[3,"Elem"],[3,"RevElem"],[3,"SList"],[3,"SElem"],[8,"GlibContainer"],[3,"Error"],[3,"Permission"],[3,"Continue"],[8,"FFIGObject"],[8,"Ptr"],[8,"ToGlib"],[8,"ToGlibPtr"],[8,"FromGlib"],[8,"FromGlibPtr"],[8,"FromGlibPtrContainer"],[4,"Option"],[3,"String"],[3,"PtrArray"],[3,"HashMap"],[3,"HashTable"],[3,"Vec"],[3,"Value"],[8,"Wrapper"],[8,"Upcast"],[8,"Downcast"],[3,"Ref"],[3,"VirtualRef"],[3,"Object"],[3,"GenericObject"],[4,"Type"],[8,"StaticType"],[8,"InstanceType"],[3,"TimeVal"],[4,"Month"],[4,"Weekday"],[3,"Date"],[8,"ValuePublic"],[6,"AppInfo"]]};
searchIndex['glib_sys'] = {"items":[[0,"","glib_sys","",null,null],[3,"GAppInfo","","",null,null],[3,"GValue","","",null,null],[3,"GList","","",null,null],[12,"data","","",0,null],[12,"next","","",0,null],[12,"prev","","",0,null],[3,"GSList","","",null,null],[12,"data","","",1,null],[12,"next","","",1,null],[3,"GError","","",null,null],[12,"domain","","",2,null],[12,"code","","",2,null],[12,"message","","",2,null],[3,"GPermission","","",null,null],[3,"GObject","","",null,null],[3,"GMainLoop","","",null,null],[3,"GMainContext","","",null,null],[3,"GSource","","",null,null],[3,"GPid","","",null,null],[3,"GPollFD","","",null,null],[3,"GDate","","Represents a day between January 1, Year 1 and a few thousand years in the future. None of its members should be accessed directly.",null,null],[3,"GHashTable","","",null,null],[5,"g_free","","",null,null],[5,"g_strndup","","",null,null],[5,"g_slist_free","","",null,null],[5,"g_slist_append","","",null,null],[5,"g_slist_prepend","","",null,null],[5,"g_slist_insert","","",null,null],[5,"g_slist_concat","","",null,null],[5,"g_slist_nth_data","","",null,null],[5,"g_slist_length","","",null,null],[5,"g_slist_last","","",null,null],[5,"g_slist_copy","","",null,null],[5,"g_slist_reverse","","",null,null],[5,"g_slist_remove","","",null,null],[5,"g_slist_remove_all","","",null,null],[5,"g_slist_remove_link","","",null,null],[5,"g_slist_delete_link","","",null,null],[5,"g_slist_find","","",null,null],[5,"g_slist_position","","",null,null],[5,"g_list_free","","",null,null],[5,"g_list_append","","",null,null],[5,"g_list_prepend","","",null,null],[5,"g_list_insert","","",null,null],[5,"g_list_concat","","",null,null],[5,"g_list_nth_data","","",null,null],[5,"g_list_length","","",null,null],[5,"g_list_last","","",null,null],[5,"g_list_first","","",null,null],[5,"g_list_copy","","",null,null],[5,"g_list_reverse","","",null,null],[5,"g_list_remove","","",null,null],[5,"g_list_remove_all","","",null,null],[5,"g_list_remove_link","","",null,null],[5,"g_list_delete_link","","",null,null],[5,"g_list_find","","",null,null],[5,"g_list_position","","",null,null],[5,"g_app_info_get_type","","",null,null],[5,"g_error_new_literal","","",null,null],[5,"g_error_free","","",null,null],[5,"g_error_copy","","",null,null],[5,"g_error_matches","","",null,null],[5,"g_set_error_literal","","",null,null],[5,"g_propagate_error","","",null,null],[5,"g_clear_error","","",null,null],[5,"g_permission_get_allowed","","",null,null],[5,"g_permission_get_can_acquire","","",null,null],[5,"g_permission_get_can_release","","",null,null],[5,"g_permission_impl_update","","",null,null],[5,"g_object_ref","","",null,null],[5,"g_object_ref_sink","","",null,null],[5,"g_object_unref","","",null,null],[5,"glue_signal_connect","","",null,null],[5,"g_type_check_instance_is_a","","",null,null],[5,"create_gvalue","","",null,null],[5,"get_gtype","","",null,null],[5,"g_value_init","","",null,null],[5,"g_value_reset","","",null,null],[5,"g_value_unset","","",null,null],[5,"g_strdup_value_contents","","",null,null],[5,"g_value_set_boolean","","",null,null],[5,"g_value_get_boolean","","",null,null],[5,"g_value_set_schar","","",null,null],[5,"g_value_get_schar","","",null,null],[5,"g_value_set_uchar","","",null,null],[5,"g_value_get_uchar","","",null,null],[5,"g_value_set_int","","",null,null],[5,"g_value_get_int","","",null,null],[5,"g_value_set_uint","","",null,null],[5,"g_value_get_uint","","",null,null],[5,"g_value_set_long","","",null,null],[5,"g_value_get_long","","",null,null],[5,"g_value_set_ulong","","",null,null],[5,"g_value_get_ulong","","",null,null],[5,"g_value_set_int64","","",null,null],[5,"g_value_get_int64","","",null,null],[5,"g_value_set_uint64","","",null,null],[5,"g_value_get_uint64","","",null,null],[5,"g_value_set_float","","",null,null],[5,"g_value_get_float","","",null,null],[5,"g_value_set_double","","",null,null],[5,"g_value_get_double","","",null,null],[5,"g_value_set_enum","","",null,null],[5,"g_value_get_enum","","",null,null],[5,"g_value_set_flags","","",null,null],[5,"g_value_get_flags","","",null,null],[5,"g_value_set_string","","",null,null],[5,"g_value_set_static_string","","",null,null],[5,"g_value_get_string","","",null,null],[5,"g_value_dup_string","","",null,null],[5,"g_value_set_boxed","","",null,null],[5,"g_value_set_static_boxed","","",null,null],[5,"g_value_get_boxed","","",null,null],[5,"g_value_set_pointer","","",null,null],[5,"g_value_get_pointer","","",null,null],[5,"g_value_set_object","","",null,null],[5,"g_value_take_object","","",null,null],[5,"g_value_get_object","","",null,null],[5,"g_value_set_gtype","","",null,null],[5,"g_value_get_gtype","","",null,null],[5,"g_value_type_compatible","","",null,null],[5,"g_value_type_transformable","","",null,null],[5,"g_main_loop_new","","",null,null],[5,"g_main_loop_ref","","",null,null],[5,"g_main_loop_unref","","",null,null],[5,"g_main_loop_run","","",null,null],[5,"g_main_loop_quit","","",null,null],[5,"g_main_loop_is_running","","",null,null],[5,"g_main_loop_get_context","","",null,null],[5,"g_main_context_new","","",null,null],[5,"g_main_context_ref","","",null,null],[5,"g_main_context_unref","","",null,null],[5,"g_main_context_default","","",null,null],[5,"g_main_context_iteration","","",null,null],[5,"g_main_context_pending","","",null,null],[5,"g_main_context_find_source_by_id","","",null,null],[5,"g_main_context_find_source_by_user_data","","",null,null],[5,"g_main_context_wakeup","","",null,null],[5,"g_main_context_acquire","","",null,null],[5,"g_main_context_release","","",null,null],[5,"g_main_context_is_owner","","",null,null],[5,"g_main_context_prepare","","",null,null],[5,"g_main_context_dispatch","","",null,null],[5,"g_main_context_add_poll","","",null,null],[5,"g_main_context_remove_poll","","",null,null],[5,"g_main_depth","","",null,null],[5,"g_main_current_source","","",null,null],[5,"g_main_context_get_thread_default","","",null,null],[5,"g_main_context_ref_thread_default","","",null,null],[5,"g_main_context_push_thread_default","","",null,null],[5,"g_main_context_pop_thread_default","","",null,null],[5,"g_timeout_source_new","","",null,null],[5,"g_timeout_source_new_seconds","","",null,null],[5,"g_timeout_add_full","","",null,null],[5,"g_timeout_add_seconds_full","","",null,null],[5,"g_idle_source_new","","",null,null],[5,"g_idle_add_full","","",null,null],[5,"g_idle_remove_by_data","","",null,null],[5,"g_child_watch_source_new","","",null,null],[5,"g_poll","","",null,null],[5,"g_source_ref","","",null,null],[5,"g_source_unref","","",null,null],[5,"g_source_attach","","",null,null],[5,"g_source_destroy","","",null,null],[5,"g_source_is_destroyed","","",null,null],[5,"g_source_set_priority","","",null,null],[5,"g_source_get_priority","","",null,null],[5,"g_source_set_can_recurse","","",null,null],[5,"g_source_get_can_recurse","","",null,null],[5,"g_source_get_id","","",null,null],[5,"g_source_get_name","","",null,null],[5,"g_source_set_name","","",null,null],[5,"g_source_set_name_by_id","","",null,null],[5,"g_source_get_context","","",null,null],[5,"g_source_set_ready_time","","",null,null],[5,"g_source_get_ready_time","","",null,null],[5,"g_source_add_poll","","",null,null],[5,"g_source_remove_poll","","",null,null],[5,"g_source_add_child_source","","",null,null],[5,"g_source_remove_child_source","","",null,null],[5,"g_source_get_time","","",null,null],[5,"g_source_remove","","",null,null],[5,"g_source_remove_by_user_data","","",null,null],[5,"g_signal_connect_data","","",null,null],[5,"g_get_current_time","","",null,null],[5,"g_usleep","","",null,null],[5,"g_get_monotonic_time","","",null,null],[5,"g_get_real_time","","",null,null],[5,"g_date_get_days_in_month","","",null,null],[5,"g_date_is_leap_year","","",null,null],[5,"g_date_get_monday_weeks_in_year","","",null,null],[5,"g_date_get_sunday_weeks_in_year","","",null,null],[5,"g_date_valid_day","","",null,null],[5,"g_date_valid_month","","",null,null],[5,"g_date_valid_year","","",null,null],[5,"g_date_valid_dmy","","",null,null],[5,"g_date_valid_julian","","",null,null],[5,"g_date_valid_weekday","","",null,null],[5,"g_date_new","","",null,null],[5,"g_date_new_dmy","","",null,null],[5,"g_date_new_julian","","",null,null],[5,"g_date_clear","","",null,null],[5,"g_date_free","","",null,null],[5,"g_date_set_day","","",null,null],[5,"g_date_set_month","","",null,null],[5,"g_date_set_year","","",null,null],[5,"g_date_set_dmy","","",null,null],[5,"g_date_set_julian","","",null,null],[5,"g_date_set_time_t","","",null,null],[5,"g_date_set_time_val","","",null,null],[5,"g_date_set_parse","","",null,null],[5,"g_date_add_days","","",null,null],[5,"g_date_subtract_days","","",null,null],[5,"g_date_add_months","","",null,null],[5,"g_date_subtract_months","","",null,null],[5,"g_date_add_years","","",null,null],[5,"g_date_subtract_years","","",null,null],[5,"g_date_days_between","","",null,null],[5,"g_date_compare","","",null,null],[5,"g_date_clamp","","",null,null],[5,"g_date_order","","",null,null],[5,"g_date_get_day","","",null,null],[5,"g_date_get_month","","",null,null],[5,"g_date_get_year","","",null,null],[5,"g_date_get_julian","","",null,null],[5,"g_date_get_weekday","","",null,null],[5,"g_date_get_day_of_year","","",null,null],[5,"g_date_is_first_of_month","","",null,null],[5,"g_date_is_last_of_month","","",null,null],[5,"g_date_get_monday_week_of_year","","",null,null],[5,"g_date_get_sunday_week_of_year","","",null,null],[5,"g_date_get_iso8601_week_of_year","","",null,null],[5,"g_date_strftime","","",null,null],[5,"g_date_valid","","",null,null],[5,"g_time_val_add","","",null,null],[5,"g_time_val_from_iso8601","","",null,null],[5,"g_time_val_to_iso8601","","",null,null],[5,"g_hash_table_new","","",null,null],[5,"g_hash_table_new_full","","",null,null],[5,"g_hash_table_insert","","",null,null],[5,"g_hash_table_replace","","",null,null],[5,"g_hash_table_add","","",null,null],[5,"g_hash_table_contains","","",null,null],[5,"g_hash_table_size","","",null,null],[5,"g_hash_table_lookup","","",null,null],[5,"g_hash_table_lookup_extended","","",null,null],[5,"g_hash_table_foreach","","",null,null],[5,"g_hash_table_remove","","",null,null],[5,"g_hash_table_steal","","",null,null],[5,"g_hash_table_remove_all","","",null,null],[5,"g_hash_table_steal_all","","",null,null],[5,"g_hash_table_get_keys","","",null,null],[5,"g_hash_table_get_values","","",null,null],[5,"g_hash_table_get_keys_as_array","","",null,null],[5,"g_hash_table_destroy","","",null,null],[5,"g_hash_table_ref","","",null,null],[5,"g_hash_table_unref","","",null,null],[5,"g_direct_equal","","",null,null],[5,"g_direct_hash","","",null,null],[5,"g_int_equal","","",null,null],[5,"g_int_hash","","",null,null],[5,"g_int64_equal","","",null,null],[5,"g_int64_hash","","",null,null],[5,"g_double_equal","","",null,null],[5,"g_double_hash","","",null,null],[5,"g_str_equal","","",null,null],[5,"g_str_hash","","",null,null],[6,"GQuark","","",null,null],[6,"gsize","","",null,null],[6,"GType","","",null,null],[6,"gboolean","","",null,null],[6,"gconstpointer","","",null,null],[6,"gpointer","","",null,null],[6,"GSourceFunc","","",null,null],[6,"GCallback","","",null,null],[6,"GClosureNotify","","",null,null],[6,"GDestroyNotify","","",null,null],[6,"GHashFunc","","",null,null],[6,"GEqualFunc","","",null,null],[6,"GHFunc","","",null,null],[17,"GFALSE","","",null,null],[17,"GTRUE","","",null,null],[17,"G_TYPE_FUNDAMENTAL_SHIFT","","",null,null],[17,"G_TYPE_INVALID","","",null,null],[17,"G_TYPE_NONE","","",null,null],[17,"G_TYPE_INTERFACE","","",null,null],[17,"G_TYPE_CHAR","","",null,null],[17,"G_TYPE_UCHAR","","",null,null],[17,"G_TYPE_BOOLEAN","","",null,null],[17,"G_TYPE_INT","","",null,null],[17,"G_TYPE_UINT","","",null,null],[17,"G_TYPE_LONG","","",null,null],[17,"G_TYPE_ULONG","","",null,null],[17,"G_TYPE_INT64","","",null,null],[17,"G_TYPE_UINT64","","",null,null],[17,"G_TYPE_ENUM","","",null,null],[17,"G_TYPE_FLAGS","","",null,null],[17,"G_TYPE_FLOAT","","",null,null],[17,"G_TYPE_DOUBLE","","",null,null],[17,"G_TYPE_STRING","","",null,null],[17,"G_TYPE_POINTER","","",null,null],[17,"G_TYPE_BOXED","","",null,null],[17,"G_TYPE_PARAM","","",null,null],[17,"G_TYPE_OBJECT","","",null,null],[17,"G_TYPE_VARIANT","","",null,null]],"paths":[[3,"GList"],[3,"GSList"],[3,"GError"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries",null,null],[0,"types","","",null,null],[0,"common","libc::types","",null,null],[0,"c95","libc::types::common","",null,null],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[13,"__variant1","","",0,null],[13,"__variant2","","",0,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","libc::types::common","",null,null],[6,"int8_t","libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","libc::types::common","",null,null],[4,"DIR","libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","libc::types","",null,null],[0,"common","libc::types::os","",null,null],[0,"posix01","libc::types::os::common","",null,null],[3,"glob_t","libc::types::os::common::posix01","",null,null],[12,"gl_pathc","","",1,null],[12,"gl_pathv","","",1,null],[12,"gl_offs","","",1,null],[12,"__unused1","","",1,null],[12,"__unused2","","",1,null],[12,"__unused3","","",1,null],[12,"__unused4","","",1,null],[12,"__unused5","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[4,"timezone","","",null,null],[6,"pthread_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sighandler_t","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",2,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[0,"bsd43","libc::types::os::common","",null,null],[3,"rusage","libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[0,"bsd44","libc::types::os::common","",null,null],[3,"sockaddr","libc::types::os::common::bsd44","",null,null],[12,"sa_family","","",6,null],[12,"sa_data","","",6,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",7,null],[12,"__ss_align","","",7,null],[12,"__ss_pad2","","",7,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",8,null],[12,"sin_port","","",8,null],[12,"sin_addr","","",8,null],[12,"sin_zero","","",8,null],[3,"in_addr","","",null,null],[12,"s_addr","","",9,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",10,null],[12,"sin6_port","","",10,null],[12,"sin6_flowinfo","","",10,null],[12,"sin6_addr","","",10,null],[12,"sin6_scope_id","","",10,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",11,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",12,null],[12,"imr_interface","","",12,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",13,null],[12,"ipv6mr_interface","","",13,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",14,null],[12,"ai_family","","",14,null],[12,"ai_socktype","","",14,null],[12,"ai_protocol","","",14,null],[12,"ai_addrlen","","",14,null],[12,"ai_addr","","",14,null],[12,"ai_canonname","","",14,null],[12,"ai_next","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",16,null],[12,"ifa_name","","",16,null],[12,"ifa_flags","","",16,null],[12,"ifa_addr","","",16,null],[12,"ifa_netmask","","",16,null],[12,"ifa_ifu","","",16,null],[12,"ifa_data","","",16,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[11,"clone","","",6,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",8,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",9,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",11,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",12,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",14,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[0,"arch","libc::types::os","",null,null],[0,"c95","libc::types::os::arch","",null,null],[6,"c_char","libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","libc::types::os::arch","",null,null],[6,"c_longlong","libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","libc::types::os::arch","",null,null],[6,"off_t","libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","libc::types::os::arch","",null,null],[3,"stat","libc::types::os::arch::posix01","",null,null],[12,"st_dev","","",17,null],[12,"st_ino","","",17,null],[12,"st_nlink","","",17,null],[12,"st_mode","","",17,null],[12,"st_uid","","",17,null],[12,"st_gid","","",17,null],[12,"__pad0","","",17,null],[12,"st_rdev","","",17,null],[12,"st_size","","",17,null],[12,"st_blksize","","",17,null],[12,"st_blocks","","",17,null],[12,"st_atime","","",17,null],[12,"st_atime_nsec","","",17,null],[12,"st_mtime","","",17,null],[12,"st_mtime_nsec","","",17,null],[12,"st_ctime","","",17,null],[12,"st_ctime_nsec","","",17,null],[12,"__unused","","",17,null],[3,"utimbuf","","",null,null],[12,"actime","","",18,null],[12,"modtime","","",18,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",19,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",18,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",19,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[0,"extra","libc::types::os::arch","",null,null],[3,"sockaddr_ll","libc::types::os::arch::extra","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[0,"consts","libc","",null,null],[0,"os","libc::consts","",null,null],[0,"c95","libc::consts::os","",null,null],[17,"EXIT_FAILURE","libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","libc::consts::os","",null,null],[17,"O_RDONLY","libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[0,"posix01","libc::consts::os","",null,null],[17,"F_DUPFD","libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"bsd44","libc::consts::os","",null,null],[17,"MADV_NORMAL","libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[0,"extra","libc::consts::os","",null,null],[17,"AF_PACKET","libc::consts::os::extra","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[0,"sysconf","libc::consts::os","",null,null],[17,"_SC_ARG_MAX","libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[0,"funcs","libc","",null,null],[0,"c95","libc::funcs","",null,null],[0,"ctype","libc::funcs::c95","",null,null],[5,"isalnum","libc::funcs::c95::ctype","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[0,"stdio","libc::funcs::c95","",null,null],[5,"fopen","libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","libc::funcs::c95","",null,null],[5,"abs","libc::funcs::c95::stdlib","",null,null],[5,"labs","","",null,null],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[0,"string","libc::funcs::c95","",null,null],[5,"strcpy","libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix88","",null,null],[5,"chmod","libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","libc::funcs::posix88","",null,null],[5,"popen","libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","libc::funcs::posix88","",null,null],[5,"open","libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[0,"dirent","libc::funcs::posix88","",null,null],[5,"opendir","libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","libc::funcs::posix88","",null,null],[5,"access","libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"getsid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"usleep","","",null,null],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[0,"signal","libc::funcs::posix88","",null,null],[5,"kill","libc::funcs::posix88::signal","",null,null],[0,"mman","libc::funcs::posix88","",null,null],[5,"mlock","libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","libc::funcs::posix88","",null,null],[5,"if_nametoindex","libc::funcs::posix88::net","",null,null],[0,"posix01","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix01","",null,null],[5,"lstat","libc::funcs::posix01::stat_","",null,null],[0,"unistd","libc::funcs::posix01","",null,null],[5,"readlink","libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,null],[5,"fdatasync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[0,"signal","libc::funcs::posix01","",null,null],[5,"signal","libc::funcs::posix01::signal","",null,null],[0,"glob","libc::funcs::posix01","",null,null],[5,"glob","libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","libc::funcs::posix01","",null,null],[5,"posix_madvise","libc::funcs::posix01::mman","",null,null],[0,"resource","libc::funcs::posix01","",null,null],[5,"getrlimit","libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","libc::funcs","",null,null],[5,"socket","libc::funcs::bsd43","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,null],[0,"bsd44","libc::funcs","",null,null],[5,"getdtablesize","libc::funcs::bsd44","",null,null],[5,"ioctl","","",null,null],[5,"madvise","","",null,null],[5,"mincore","","",null,null],[5,"flock","","",null,null]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
searchIndex['pkg_config'] = {"items":[[0,"","pkg_config","A build dependency for Cargo libraries to find system artifacts through the\n`pkg-config` utility.",null,null],[3,"Config","","",null,null],[3,"Library","","",null,null],[12,"libs","","",0,null],[12,"link_paths","","",0,null],[12,"frameworks","","",0,null],[12,"framework_paths","","",0,null],[12,"include_paths","","",0,null],[12,"version","","",0,null],[5,"target_supported","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"find_library","","Simple shortcut for using all default options for finding a library.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"library"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new set of configuration options which are all initially set\nto \"blank\".",1,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"statik","","Indicate whether the `--static` flag should be passed.",1,{"inputs":[{"name":"config"},{"name":"bool"}],"output":{"name":"config"}}],[11,"atleast_version","","Indicate that the library must be at least version `vers`.",1,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"config"}}],[11,"arg","","Add an argument to pass to pkg-config.",1,{"inputs":[{"name":"config"},{"name":"s"}],"output":{"name":"config"}}],[11,"find","","Run `pkg-config` to find the library `name`.",1,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_variable","","Run `pkg-config` to get the value of a variable from a package using\n--variable.",1,{"inputs":[{"name":"config"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Library"],[3,"Config"]]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator.",null,null],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
